"StaticJavaLib.assertTrue(-2 / -3 == 0)" in "StaticJavaLib.assertTrue(-2 / -3 == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(-2 / 3 == 0)" in "StaticJavaLib.assertTrue(-2 / 3 == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(-3 / -2 == 1)" in "StaticJavaLib.assertTrue(-3 / -2 == 1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(-3 / 2 == -1)" in "StaticJavaLib.assertTrue(-3 / 2 == -1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(2 / -3 == 0)" in "StaticJavaLib.assertTrue(2 / -3 == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(2 / 3 == 0)" in "StaticJavaLib.assertTrue(2 / 3 == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(3 / -2 == -1)" in "StaticJavaLib.assertTrue(3 / -2 == -1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(3 / 2 == 1)" in "StaticJavaLib.assertTrue(3 / 2 == 1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(-2,-3) == 0)" in "StaticJavaLib.assertTrue(divide(-2,-3) == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(-2,3) == 0)" in "StaticJavaLib.assertTrue(divide(-2,3) == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(-3,-2) == 1)" in "StaticJavaLib.assertTrue(divide(-3,-2) == 1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(-3,2) == -1)" in "StaticJavaLib.assertTrue(divide(-3,2) == -1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(2,-3) == 0)" in "StaticJavaLib.assertTrue(divide(2,-3) == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(2,3) == 0)" in "StaticJavaLib.assertTrue(divide(2,3) == 0);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(3,-2) == -1)" in "StaticJavaLib.assertTrue(divide(3,-2) == -1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"StaticJavaLib.assertTrue(divide(3,2) == 1)" in "StaticJavaLib.assertTrue(divide(3,2) == 1);" ==> public static void StaticJavaLib.assertTrue(boolean)
"divide(-2,-3)" in "divide(-2,-3) == 0" ==> static int divide(int i,int j){
"divide(-2,3)" in "divide(-2,3) == 0" ==> static int divide(int i,int j){
"divide(-3,-2)" in "divide(-3,-2) == 1" ==> static int divide(int i,int j){
"divide(-3,2)" in "divide(-3,2) == -1" ==> static int divide(int i,int j){
"divide(2,-3)" in "divide(2,-3) == 0" ==> static int divide(int i,int j){
"divide(2,3)" in "divide(2,3) == 0" ==> static int divide(int i,int j){
"divide(3,-2)" in "divide(3,-2) == -1" ==> static int divide(int i,int j){
"divide(3,2)" in "divide(3,2) == 1" ==> static int divide(int i,int j){
"i" in "i / j" ==> int i
"j" in "i / j" ==> int j

"-1" in "-3 / 2 == -1": int
"-1" in "3 / -2 == -1": int
"-1" in "divide(-3,2) == -1": int
"-1" in "divide(3,-2) == -1": int
"-2 / -3 == 0" in "StaticJavaLib.assertTrue(-2 / -3 == 0)": boolean
"-2 / -3" in "-2 / -3 == 0": int
"-2 / 3 == 0" in "StaticJavaLib.assertTrue(-2 / 3 == 0)": boolean
"-2 / 3" in "-2 / 3 == 0": int
"-2" in "-2 / -3": int
"-2" in "-2 / 3": int
"-2" in "-3 / -2": int
"-2" in "3 / -2": int
"-2" in "divide(-2,-3)": int
"-2" in "divide(-2,3)": int
"-2" in "divide(-3,-2)": int
"-2" in "divide(3,-2)": int
"-3 / -2 == 1" in "StaticJavaLib.assertTrue(-3 / -2 == 1)": boolean
"-3 / -2" in "-3 / -2 == 1": int
"-3 / 2 == -1" in "StaticJavaLib.assertTrue(-3 / 2 == -1)": boolean
"-3 / 2" in "-3 / 2 == -1": int
"-3" in "-2 / -3": int
"-3" in "-3 / -2": int
"-3" in "-3 / 2": int
"-3" in "2 / -3": int
"-3" in "divide(-2,-3)": int
"-3" in "divide(-3,-2)": int
"-3" in "divide(-3,2)": int
"-3" in "divide(2,-3)": int
"0" in "-2 / -3 == 0": int
"0" in "-2 / 3 == 0": int
"0" in "2 / -3 == 0": int
"0" in "2 / 3 == 0": int
"0" in "divide(-2,-3) == 0": int
"0" in "divide(-2,3) == 0": int
"0" in "divide(2,-3) == 0": int
"0" in "divide(2,3) == 0": int
"1" in "-1": int
"1" in "-3 / -2 == 1": int
"1" in "3 / 2 == 1": int
"1" in "divide(-3,-2) == 1": int
"1" in "divide(3,2) == 1": int
"2 / -3 == 0" in "StaticJavaLib.assertTrue(2 / -3 == 0)": boolean
"2 / -3" in "2 / -3 == 0": int
"2 / 3 == 0" in "StaticJavaLib.assertTrue(2 / 3 == 0)": boolean
"2 / 3" in "2 / 3 == 0": int
"2" in "-2": int
"2" in "-3 / 2": int
"2" in "2 / -3": int
"2" in "2 / 3": int
"2" in "3 / 2": int
"2" in "divide(-3,2)": int
"2" in "divide(2,-3)": int
"2" in "divide(2,3)": int
"2" in "divide(3,2)": int
"3 / -2 == -1" in "StaticJavaLib.assertTrue(3 / -2 == -1)": boolean
"3 / -2" in "3 / -2 == -1": int
"3 / 2 == 1" in "StaticJavaLib.assertTrue(3 / 2 == 1)": boolean
"3 / 2" in "3 / 2 == 1": int
"3" in "-2 / 3": int
"3" in "-3": int
"3" in "2 / 3": int
"3" in "3 / -2": int
"3" in "3 / 2": int
"3" in "divide(-2,3)": int
"3" in "divide(2,3)": int
"3" in "divide(3,-2)": int
"3" in "divide(3,2)": int
"StaticJavaLib.assertTrue(-2 / -3 == 0)" in "StaticJavaLib.assertTrue(-2 / -3 == 0);": void
"StaticJavaLib.assertTrue(-2 / 3 == 0)" in "StaticJavaLib.assertTrue(-2 / 3 == 0);": void
"StaticJavaLib.assertTrue(-3 / -2 == 1)" in "StaticJavaLib.assertTrue(-3 / -2 == 1);": void
"StaticJavaLib.assertTrue(-3 / 2 == -1)" in "StaticJavaLib.assertTrue(-3 / 2 == -1);": void
"StaticJavaLib.assertTrue(2 / -3 == 0)" in "StaticJavaLib.assertTrue(2 / -3 == 0);": void
"StaticJavaLib.assertTrue(2 / 3 == 0)" in "StaticJavaLib.assertTrue(2 / 3 == 0);": void
"StaticJavaLib.assertTrue(3 / -2 == -1)" in "StaticJavaLib.assertTrue(3 / -2 == -1);": void
"StaticJavaLib.assertTrue(3 / 2 == 1)" in "StaticJavaLib.assertTrue(3 / 2 == 1);": void
"StaticJavaLib.assertTrue(divide(-2,-3) == 0)" in "StaticJavaLib.assertTrue(divide(-2,-3) == 0);": void
"StaticJavaLib.assertTrue(divide(-2,3) == 0)" in "StaticJavaLib.assertTrue(divide(-2,3) == 0);": void
"StaticJavaLib.assertTrue(divide(-3,-2) == 1)" in "StaticJavaLib.assertTrue(divide(-3,-2) == 1);": void
"StaticJavaLib.assertTrue(divide(-3,2) == -1)" in "StaticJavaLib.assertTrue(divide(-3,2) == -1);": void
"StaticJavaLib.assertTrue(divide(2,-3) == 0)" in "StaticJavaLib.assertTrue(divide(2,-3) == 0);": void
"StaticJavaLib.assertTrue(divide(2,3) == 0)" in "StaticJavaLib.assertTrue(divide(2,3) == 0);": void
"StaticJavaLib.assertTrue(divide(3,-2) == -1)" in "StaticJavaLib.assertTrue(divide(3,-2) == -1);": void
"StaticJavaLib.assertTrue(divide(3,2) == 1)" in "StaticJavaLib.assertTrue(divide(3,2) == 1);": void
"String[] args" in "public static void main(String[] args){": java.lang.String[]
"divide(-2,-3) == 0" in "StaticJavaLib.assertTrue(divide(-2,-3) == 0)": boolean
"divide(-2,-3)" in "divide(-2,-3) == 0": int
"divide(-2,3) == 0" in "StaticJavaLib.assertTrue(divide(-2,3) == 0)": boolean
"divide(-2,3)" in "divide(-2,3) == 0": int
"divide(-3,-2) == 1" in "StaticJavaLib.assertTrue(divide(-3,-2) == 1)": boolean
"divide(-3,-2)" in "divide(-3,-2) == 1": int
"divide(-3,2) == -1" in "StaticJavaLib.assertTrue(divide(-3,2) == -1)": boolean
"divide(-3,2)" in "divide(-3,2) == -1": int
"divide(2,-3) == 0" in "StaticJavaLib.assertTrue(divide(2,-3) == 0)": boolean
"divide(2,-3)" in "divide(2,-3) == 0": int
"divide(2,3) == 0" in "StaticJavaLib.assertTrue(divide(2,3) == 0)": boolean
"divide(2,3)" in "divide(2,3) == 0": int
"divide(3,-2) == -1" in "StaticJavaLib.assertTrue(divide(3,-2) == -1)": boolean
"divide(3,-2)" in "divide(3,-2) == -1": int
"divide(3,2) == 1" in "StaticJavaLib.assertTrue(divide(3,2) == 1)": boolean
"divide(3,2)" in "divide(3,2) == 1": int
"i / j" in "return i / j;": int
"i" in "i / j": int
"int i" in "static int divide(int i,int j){": int
"int j" in "static int divide(int i,int j){": int
"j" in "i / j": int
"public class IntDivide {" in "public class IntDivide {": IntDivide
